plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url 'https://maven.isxander.dev/releases' }
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url 'https://jitpack.io' }
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        url = 'https://maven.resourcefulbees.com/repository/maven-public/'
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
    }
    mavenCentral()
}

loom {
	accessWidenerPath = file("src/main/resources/dsurround.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    // Nashorn Script Engine
    implementation "org.openjdk.nashorn:nashorn-core:${project.nashorn_version}"
    include "org.openjdk.nashorn:nashorn-core:${project.nashorn_version}"

    // Configuration APIs
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.clothapi_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}")

    // Serene Seasons from Modrinth
    modCompileOnly "maven.modrinth:serene-seasons:${project.serene_seasons_version}"
    
    // Include Fabric API as a Jar-in-Jar dependency
    include "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    from("CREDITS.md")
    
    // 确保生成的jar文件包含所有依赖
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// 添加一个任务来确保build/libs目录存在
task ensureLibsDir {
    doFirst {
        mkdir "build/libs"
    }
}

// 让build任务依赖于ensureLibsDir
build.dependsOn ensureLibsDir

// 确保Gradle使用Java 21
allprojects {
    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }
}
